// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Static__Verbs$Ipa = require("./Static__Verbs.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var re_vowelNcons = (/(?<vs>a|e|i|o|u|y)([b-d]|[f-h]|[j-t][uwxz])$/gi);

var re_vowel = (/[aeiouy]/gi);

var re_diphthong = (/(a|e|i|o|u|y){2}/gi);

var re_last_e = (/e$/i);

var re_last_letter_double = (/(?<l>\w)(\k<l>)$/i);

function count_syllables(word) {
  var match = re_vowel.exec(word);
  var vowel_count = match !== null ? match.length : 0;
  var match$1 = re_diphthong.exec(word);
  var diphthongs_count = match$1 !== null ? match$1.length : 0;
  if (re_last_e.test(word)) {
    return (vowel_count - diphthongs_count | 0) - 1 | 0;
  } else {
    return vowel_count - diphthongs_count | 0;
  }
}

function is_ing(word) {
  if ((/ing$/i).test(word)) {
    var word_stem = word.replace((/ing$/i), "");
    var re_is_word_stem = new RegExp(word_stem, "i");
    if (re_last_letter_double.test(word_stem)) {
      var letter = word_stem.charAt(word_stem.length - 1 | 0);
      word_stem = word_stem.replace(re_last_letter_double, letter);
    } else if (Belt_Array.some(Static__Verbs$Ipa.verbs_e, (function (param) {
              return re_is_word_stem.test(param);
            }))) {
      word_stem = word_stem.concat("e");
    }
    return /* tuple */[
            word_stem,
            "ing"
          ];
  } else {
    return /* tuple */[
            word,
            undefined
          ];
  }
}

function grammarify(word) {
  var match = is_ing(word);
  var match$1 = match[1];
  var w = match[0];
  var match$2;
  if (match$1 !== undefined) {
    if (match$1 === "ing") {
      match$2 = /* tuple */[
        w,
        "ɪŋ"
      ];
    } else {
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "Grammar.re",
              47,
              4
            ]
          ];
    }
  } else {
    match$2 = /* tuple */[
      w,
      ""
    ];
  }
  return /* tuple */[
          match$2[0],
          match$2[1]
        ];
}

exports.re_vowelNcons = re_vowelNcons;
exports.re_vowel = re_vowel;
exports.re_diphthong = re_diphthong;
exports.re_last_e = re_last_e;
exports.re_last_letter_double = re_last_letter_double;
exports.count_syllables = count_syllables;
exports.is_ing = is_ing;
exports.grammarify = grammarify;
/* re_vowelNcons Not a pure module */
